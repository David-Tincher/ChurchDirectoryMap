# Generated by Django 5.2.4 on 2025-07-17 04:37

import django.core.validators
from django.db import migrations, models

# Check if PostGIS is available and database supports it
try:
    import django.contrib.gis.db.models.fields
    from django.conf import settings
    
    # Check if we're using a GIS-enabled database backend
    db_engine = settings.DATABASES['default']['ENGINE']
    HAS_POSTGIS = 'gis' in db_engine or 'postgis' in db_engine
except (ImportError, KeyError):
    HAS_POSTGIS = False


def create_church_model_fields():
    """
    Create the Church model fields, conditionally including PostGIS field.
    """
    fields = [
        ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
        ('name', models.CharField(help_text='Official name of the church', max_length=200)),
        ('street_address', models.CharField(help_text='Street address of the church', max_length=300)),
        ('city', models.CharField(help_text='City where the church is located', max_length=100)),
        ('state', models.CharField(help_text='State where the church is located', max_length=50)),
        ('zip_code', models.CharField(blank=True, help_text='ZIP code of the church location', max_length=10)),
        ('latitude', models.DecimalField(blank=True, decimal_places=7, help_text='Latitude coordinate (-90 to 90)', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(-90.0), django.core.validators.MaxValueValidator(90.0)])),
        ('longitude', models.DecimalField(blank=True, decimal_places=7, help_text='Longitude coordinate (-180 to 180)', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(-180.0), django.core.validators.MaxValueValidator(180.0)])),
    ]
    
    # Add PostGIS field only if available
    if HAS_POSTGIS:
        fields.append(
            ('location', django.contrib.gis.db.models.fields.PointField(blank=True, help_text='Geographic location point (PostGIS)', null=True, srid=4326))
        )
    
    # Add remaining fields
    fields.extend([
        ('phone', models.CharField(blank=True, help_text='Church phone number', max_length=20)),
        ('website', models.URLField(blank=True, help_text='Church website URL')),
        ('email', models.EmailField(blank=True, help_text='Church email address', max_length=254)),
        ('service_times', models.TextField(blank=True, help_text='Service times and schedule information')),
        ('geocoding_accuracy', models.CharField(choices=[('high', 'High'), ('medium', 'Medium'), ('low', 'Low')], default='medium', help_text='Accuracy level of geocoded coordinates', max_length=10)),
        ('created_at', models.DateTimeField(auto_now_add=True)),
        ('updated_at', models.DateTimeField(auto_now=True)),
        ('is_active', models.BooleanField(default=True, help_text='Whether the church is currently active')),
    ])
    
    return fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Church',
            fields=create_church_model_fields(),
            options={
                'verbose_name': 'Church',
                'verbose_name_plural': 'Churches',
                'ordering': ['state', 'city', 'name'],
                'indexes': [models.Index(fields=['state', 'city'], name='churches_ch_state_c80f3d_idx'), models.Index(fields=['latitude', 'longitude'], name='churches_ch_latitud_0e8f99_idx')],
            },
        ),
    ]
